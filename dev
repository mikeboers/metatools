#!/usr/bin/env python
"""Executes the given command with a modified path and KS_PYTHON_SITES.

E.g.:

    dev python -> Runs standard Python but imports from local key_tools.
    dev maya2011 -> Runs Maya2011 but with the local key_tools.

This still relies upon whichever sitecustomize that is within the PYTHONPATH to
bootstrap the Python sys.path with KS_PYTHON_SITES. This script still depends
upon the PATH to contain directories within the production tools in order to
hook them.

"""


import os
import optparse
import sys


optparser = optparse.OptionParser(
    usage="usage: %prog [options] command [argument ...]"
)
optparser.add_option(
    '-e', '--export',
    dest="export", action="store_true", default=False,
    help="print the changes to the environment",
)
optparser.add_option(
    '-s', '--site',
    dest="sites", action="append",
    help="directory to use as the development $KS_TOOLS",
)
optparser.add_option(
    '-b', '--shell',
    dest="shell", action="store_true", default=False,
    help="start a shell in development mode",
)

optparser.disable_interspersed_args()
opts, args = optparser.parse_args()


# Should we inherit, or start a clean environment?
if opts.export:
    environ = {}
else:
    environ = os.environ.copy()


# Determine which new sites to add.
if opts.sites:
    sites = opts.sites[:]
else:
    # Autodetect local sites.
    sites = [os.path.expanduser(x) for x in ('~/key_tools', '~/dev', '~/key_local_tool_development')]
    sites = [x for x in sites if os.path.exists(x)]


# Append on the existing sites, and make everything absolute.
sites.extend(os.environ.get('KS_PYTHON_SITES', '').split(':'))
sites = [os.path.abspath(x.strip()) for x in sites if x.strip()]


# Make sure that a development environment exists.
if not sites:
    print 'Could not find suitable development directory. Please make one of:'
    print '\t~/key_tools'
    print '\t~/dev'
    print '\t~/key_local_tool_development'
    exit(1)

environ['KS_PYTHON_SITES'] = ':'.join(sites)


# Construct the new path by copying entries in the current PATH which match
# KS_TOOLS, and adding coresponding entries to all of the sites.
# TODO: Derive this better.
ks_tools = os.path.abspath(os.environ['KS_TOOLS'])

path = []
for dir_name in os.environ['PATH'].split(':'):
    dir_name = os.path.abspath(dir_name)
    
    # If this directory is within the main tools, add a site specific version
    # if it exists there too.
    if dir_name.startswith(ks_tools):
        relative_dir = os.path.relpath(dir_name, ks_tools)
        for site in sites:
            site_specific_dir = os.path.join(site, relative_dir)
            if os.path.exists(site_specific_dir):
                path.append(site_specific_dir)
    
    path.append(dir_name)
    
environ['PATH'] = ':'.join(path)


if opts.export:
    # TODO: Use proper quote.
    print '\n'.join("export %s='%s'" % x for x in sorted(environ.iteritems()))
    exit()

if opts.shell:
    shell = os.environ.get('SHELL', 'bash')
    args = [shell, '--norc']

if not args:
    optparser.print_usage()
    exit(1)
    
# Execute the requested command.
# This will look for the command in the PATH within the given environment.
os.execvpe(args[0], args, environ)
    
# DOES NOT CONTINUE.

