#!/usr/bin/env python
"""Executes the given command with a modified path and KS_PYTHON_SITES.

E.g.:

    dev python -> Runs standard Python but imports from local key_tools.
    dev maya2011 -> Runs Maya2011 but with the local key_tools.

This still relies upon whichever sitecustomize that is within the PYTHONPATH to
bootstrap the Python sys.path with KS_PYTHON_SITES. This script still depends
upon the PATH to contain directories within the production tools in order to
hook them.

"""


import os
import optparse
import sys


optparser = optparse.OptionParser(
    usage="usage: %prog [options] command [argument ...]"
)
optparser.add_option(
    '-e', '--export',
    dest="export", action="store_true", default=False,
    help="print the changes to the environment",
)
optparser.add_option(
    '-s', '--site',
    dest="sites", action="append",
    help="directory to use as the development $KS_TOOLS",
)
optparser.add_option(
    '-u', '--user',
    dest="users", action="append",
    help="user whose dev environment to inherit; overriden by --site",
)
optparser.add_option(
    '-l', '--list-sites',
    dest="list_sites", action="store_true", default=False,
    help="list the development environments we would have used (colon delimited)"
)
optparser.add_option(
    '-f', '--full',
    dest="full", action="store_true", default=False,
    help="completely override the standard environment, i.e. don't inherit from $KS_TOOLS",
)
optparser.add_option(
    '-b', '--bootstrap',
    dest="bootstrap", action="store_true", default=False,
    help="bootstrap a previous environment from $KS_DEV_ARGS",
)
optparser.disable_interspersed_args()
opts, args = optparser.parse_args()

if opts.bootstrap:
    opts, _ = optparser.parse_args([x for x in os.environ.get('KS_DEV_ARGS', '').split() if x])

# Should we inherit, or start a clean environment?
if opts.export:
    environ = {}
else:
    environ = os.environ.copy()

# Store the original flags as provided so that --bootstrap can pick it back up.
# Can't just use -len(args) because -0 won't do what we want.
bootstrap = sys.argv[1:len(sys.argv) - len(args)]
bootstrap = os.environ.get('KS_DEV_ARGS', '').split() + bootstrap
environ['KS_DEV_ARGS'] = ' '.join(x for x in bootstrap if x and x not in ('-e', '--export', '-b', '--bootstrap'))

# Determine which new sites to add.
if opts.sites:
    new_sites = opts.sites[:]
else:
    # Autodetect local sites.
    users = opts.users or [""]
    new_sites = [os.path.expanduser('~%s/%s' % (user, name)) for user in users for name in ('key_tools', 'dev', 'key_local_tool_development')]
    new_sites = [x for x in new_sites if os.path.exists(x)]


# Make sure that a development environment exists.
if not new_sites:
    print 'Could not find suitable development directory. Please make one of:'
    print '\t~/key_tools'
    print '\t~/dev'
    print '\t~/key_local_tool_development'
    exit(1)


if opts.list_sites:
    print ':'.join(new_sites)
    exit(0)


# Append on the existing sites, and make everything absolute.
sites = new_sites + os.environ.get('KS_PYTHON_SITES', '').split(':')
sites = [os.path.abspath(x.strip()) for x in sites if x.strip()]




environ['KS_PYTHON_SITES'] = ':'.join(sites)


# Construct the new path by copying entries in the current PATH which match
# KS_TOOLS, and adding coresponding entries to all of the sites.
# TODO: Derive this better.
ks_tools = os.path.abspath(os.environ['KS_TOOLS'])

path = []
for dir_name in os.environ['PATH'].split(':'):
    dir_name = os.path.abspath(dir_name)
    
    # If this directory is within the main tools, add a site specific version
    # if it exists there too.
    if dir_name.startswith(ks_tools):
        relative_dir = os.path.relpath(dir_name, ks_tools)
        for site in sites:
            site_specific_dir = os.path.join(site, relative_dir)
            if os.path.exists(site_specific_dir):
                path.append(site_specific_dir)
    
    path.append(dir_name)
    
environ['PATH'] = ':'.join(path)


# Replace all $KS_TOOLS with our new site.
if opts.full:
    new_tools = new_sites[0]
    for k, v in environ.items():
        environ[k] = v.replace(ks_tools, new_tools)
    for k, v in os.environ.iteritems():
        new_v = v.replace(ks_tools, new_tools)
        if new_v != v:
            environ.setdefault(k, new_v)
    
    # Make sure that `sitecustomize` is still on the path.
    environ['PYTHONPATH'] += ':' + ks_tools


# Print out the changes to the environment.
if opts.export:
    for k, v in sorted(environ.iteritems()):
        print "export %s='%s'" % (k, v.replace("'", "'\\''"))
    exit()


if not args:
    optparser.print_usage()
    exit(1)


# Execute the requested command.
# This will look for the command in the PATH within the given environment.
os.execvpe(args[0], args, environ)
    
# DOES NOT CONTINUE.

